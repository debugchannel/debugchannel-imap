#!/usr/bin/python
"""
Copyright (c) debugchannel 2013

dcimap is based on code written by Chris Kirkham. Thanks

Copyright (c) 2010 -- Chris Kirkham

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation
 files (the "Software"), to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following
 conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
"""

import getpass, email, imaplib2, json, os, sys, threading, time, urllib2

class Idler(threading.Thread):
		
	imap = imaplib2.IMAP4_SSL("imap.gmail.com") 

	stopWaitingEvent = threading.Event()
	knownAboutMail = [] 
	killNow = False 
	
	
	def __init__(self, server, username, password):

				
		try:
			#establish connection to IMAP Server
			self.imap.LOGIN(username, password)
			self.imap.SELECT("INBOX")
			
			#get the IDs of all messages in the inbox and put in knowAboutMail
			typ, data = self.imap.SEARCH(None, 'ALL')
			self.knownAboutMail = data[0].split()
			
			#now run the inherited __init__ method to create thread
			threading.Thread.__init__(self)
			
		except: #Uh Oh, something went wrong
			print 'ERROR: IMAP Issue. It could be one (or more) of the following:'
			print '- The impalib2.py file needs to be in the same directory as this file'
			print '- You are not connected to the internet'
			print '- The IMAP server is down'
			print '- Your username and/or password is incorrect'
			sys.exit(1)

	def run(self):
		while not self.killNow:
			self.waitForServer()	
			
	
	def publish(self, emailTo, emailFrom, emailSubject, emailMessage):

		headers = {'Accept': 'application/json', 'Content-Type': 'application/json', 'User-Agent': "Mozilla/5.0"}

	        req = urllib2.Request(
                        "http://192.168.2.244:1025/imap",
                        json.dumps({
                                        "handler": "email",
                                        "args": [emailTo, emailSubject,emailMessage],
                                        'info': {
                                                        'pid': os.getpid(),
                                                        'machineId': "hello",
                                                        'generationTime': time.time(),
                                                        'sequenceNo':1
                                        },
                                        "trace": [ {'location': emailFrom, 'function': 'myfunc'} ]
                        })
        	)
        	map(lambda (x,y): req.add_header(x,y), headers.items())
        	urllib2.urlopen(req)
	
	def getMessageHeaderFieldsById(self, id, fields_tuple):
		
		# Headers
		typ, header = self.imap.FETCH(id, '(RFC822.HEADER)')
		
		headerlines = header[0][1].splitlines()
		
		results = {}
		for field in fields_tuple:
			results[field] = ''
			for line in headerlines:
				if line.startswith(field):
					results[field] = line

		# Message Body
		typ, data = self.imap.FETCH(id,'(RFC822)')
		raw_email = email.message_from_string(data[0][1])

		if raw_email.is_multipart():
			for payload in raw_email.get_payload():		
				results['Message'] = payload.get_payload()
		else:
			results['Message'] = payload.get_payload()

		return results 
		

	def showNewMail(self):
		
		#get IDs of all UNSEEN messages 
		typ, data = self.imap.SEARCH(None, 'UNSEEN')
				
		for id in data[0].split():
			if not id in self.knownAboutMail:
				
				#get From and Subject fields from header
				headerFields = self.getMessageHeaderFieldsById(id, ('From', 'Subject'))
								
				self.publish(username,headerFields['From'],headerFields['Subject'],headerFields['Message'],)
				
				self.knownAboutMail.append(id)
				

	def kill(self):
		self.killNow = True # to stop while loop in run()
		self.timeout = True # keeps waitForServer() nice
		self.stopWaitingEvent.set() # to let wait() to return and let execution continue


	def waitForServer(self):
		
		#init
		self.newMail = False
		self.timeout = False
		self.IDLEArgs = ''
		self.stopWaitingEvent.clear()
		
		def _IDLECallback(args):
			self.IDLEArgs = args
			self.stopWaitingEvent.set()
			
		self.imap.idle(timeout=1740, callback=_IDLECallback)

		self.stopWaitingEvent.wait()
				
		if not self.killNow:
			
			if self.IDLEArgs[0][1][0] == ('IDLE terminated (Success)'):
			# This (above) is sent when either: there has been a timeout (server sends); or, there
			# is new mail. We have to check manually to see if there is new mail. 
				
				typ, data = self.imap.SEARCH(None, 'UNSEEN') # like before, get UNSEEN message IDs
				
				
				#see if each ID is new, and, if it is, make newMail True
				for id in data[0].split():
					if not id in self.knownAboutMail:
						self.newMail = self.newMail or True
					else:
						self.timeout = True 
						# gets executed if there are UNSEEN messages that we have been notified of, 
						# but we haven't yet read. In this case, it response was just a timeout.
						
				if data[0] == '': # no IDs, so it was a timeout (but no notified but UNSEEN mail)
					self.timeout = True
		
			#now there has either been a timeout or a new message -- Do something...
			if self.newMail:
				self.showNewMail()
								



if not len(sys.argv) >= 2:
	print '* ERROR: 2 Arguments are required. Call dcimap as follows:'
	print ' '
	print 'dcimap username password'
	print ' '
	print 'Alternatively, you can just pass your username and enter your password hidden:'
	print ' '
	print 'dcimap username   (then you are prompted for a password)'
	print ' '
	sys.exit(1)

global username

username = sys.argv[1]	

if len(sys.argv) == 3:
	password = sys.argv[2]			
else:
	password = getpass.getpass()
	
ServerTimeout	  = 29 # Mins   

print "Connecting to IMAP Server..."


idler = Idler("imap.gmail.com", username, password)
idler.start()

print 'Connected to imap.gmail.com'

try:
	while True: time.sleep(2000)
except KeyboardInterrupt: 
	print "Closing IMAP connection ..."

idler.kill()	
idler.imap.CLOSE()
idler.imap.LOGOUT()

print 'IMAP connection closed'


sys.exit()
