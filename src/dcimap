#!/usr/bin/python

"""
Released under the MIT/X11 License

Copyright (c) 2010 -- Chris Kirkham

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation
 files (the "Software"), to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following
 conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
"""

import threading, imaplib2, os, sys, getpass

if not len(sys.argv) >= 2:
	print '* ERROR: 2 Arguments are required. Call dcimap as follows:'
	print ' '
	print 'dcimap username password'
	print ' '
	print 'Alternatively, you can just pass your username and enter your password hidden:'
	print ' '
	print 'dcimap username                    (then you\'re prompted for a password)'
	print ' '
	sys.exit(1)


username = sys.argv[1]			# or 'username string'

if len(sys.argv) == 3:
	password = sys.argv[2]			
else:
	password = getpass.getpass()
	
ServerTimeout	  = 29 # Mins   		(leave if you're not sure)


class Idler(threading.Thread):
		
	imap = imaplib2.IMAP4_SSL("imap.gmail.com") # can be changed to another server if needed
	
	stopWaitingEvent = threading.Event()

	knownAboutMail = [] 
	killNow = False 
	
	
	def __init__(self, username, password):
				
		try:
			#establish connection to IMAP Server
			self.imap.LOGIN(username, password)
			self.imap.SELECT("INBOX")
			
			#get the IDs of all messages in the inbox and put in knowAboutMail
			typ, data = self.imap.SEARCH(None, 'ALL')
			self.knownAboutMail = data[0].split()
			
			#now run the inherited __init__ method to create thread
			threading.Thread.__init__(self)
			
		except: #Uh Oh, something went wrong
			print 'ERROR: IMAP Issue. It could be one (or more) of the following:'
			print '- The impalib2.py file needs to be in the same directory as this file'
			print '- You\'re not connected to the internet'
			print '- Google\'s mail server(s) is/are down'
			print '- Your username and/or password is incorrect'
			sys.exit(1)

	def run(self):
		while not self.killNow:
			self.waitForServer()	
			
	
	def publish(self, title, message):
		print ' '
		print 'NEW MAIL:'
		print '--', title
		print '--', message
	
	
	def getMessageHeaderFieldsById(self, id, fields_tuple):
		
		#get the entire header
		typ, header = self.imap.FETCH(id, '(RFC822.HEADER)')
		
		#get individual lines
		headerlines = header[0][1].splitlines()
		
		#get the lines that start with the values in fields_tuple
		results = {}
		for field in fields_tuple:
			results[field] = ''
			for line in headerlines:
				if line.startswith(field):
					results[field] = line
					
		return results #which is a dictionary containing the the requested fields
		

	def showNewMailMessages(self):
		
		#get IDs of all UNSEEN messages 
		typ, data = self.imap.SEARCH(None, 'UNSEEN')
				
		for id in data[0].split():
			if not id in self.knownAboutMail:
				
				#get From and Subject fields from header
				headerFields = self.getMessageHeaderFieldsById(id, ('From', 'Subject'))
								
				self.publish(" ".join(['Mail', headerFields['From']]), "'"+headerFields['Subject']+"'")
				
				self.knownAboutMail.append(id)
				

	def kill(self):
		self.killNow = True # to stop while loop in run()
		self.timeout = True # keeps waitForServer() nice
		self.stopWaitingEvent.set() # to let wait() to return and let execution continue


	def waitForServer(self):
		
		#init
		self.newMail = False
		self.timeout = False
		self.IDLEArgs = ''
		self.stopWaitingEvent.clear()
		
		def _IDLECallback(args):
			self.IDLEArgs = args
			self.stopWaitingEvent.set()
			#_IDLECallack() is entered when the IMAP server responds to the IDLE command when new
			#mail is received. The self.stopWaitingEvent.set() allows the .wait() to return and
			#therefore the rest of waitForServer().
			
			
		#attach callback function, and let server know it should tell us when new mail arrives	
		self.imap.idle(timeout=60*ServerTimeout, callback=_IDLECallback)

		#execution will stay here until either:
		# - a new message is received; or
		# - the timeout has happened 
		#   	- we set the timout -- the RFC says the server has the right to forget about 
		#	  	  us after 30 mins of inactivity (i.e. not communicating with server for 30 mins). 
		#	  	  By sending the IDLE command every 29 mins, we won't be forgotten.
		# - Alternatively, the kill() method has been invoked.
		self.stopWaitingEvent.wait()
		
		#self.IDLEArgs has now been filled (if not kill()ed)
		
		if not self.killNow: # skips a chunk of code to sys.exit() more quickly.
			
			if self.IDLEArgs[0][1][0] == ('IDLE terminated (Success)'):
			# This (above) is sent when either: there has been a timeout (server sends); or, there
			# is new mail. We have to check manually to see if there is new mail. 
				
				typ, data = self.imap.SEARCH(None, 'UNSEEN') # like before, get UNSEEN message IDs
				
				
				#see if each ID is new, and, if it is, make newMail True
				for id in data[0].split():
					if not id in self.knownAboutMail:
						self.newMail = self.newMail or True
					else:
						self.timeout = True 
						# gets executed if there are UNSEEN messages that we have been notified of, 
						# but we haven't yet read. In this case, it response was just a timeout.
						
				if data[0] == '': # no IDs, so it was a timeout (but no notified but UNSEEN mail)
					self.timeout = True
		
			#now there has either been a timeout or a new message -- Do something...
			if self.newMail:
				self.showNewMailMessages()
							
			elif self.timeout:
				print "timeout"		

		print 'waitForServer() exited'
			
			
def main():
	global username
	global password
	
	idler = Idler(username, password)
	idler.start()
	
	print '* Waiting for mail...'
	q = ''
	while not q == 'q':
		q = raw_input('Type \'q\' followed by [ENTER] to quit: ')
		
	idler.kill()	
	idler.imap.CLOSE()
	idler.imap.LOGOUT()
	sys.exit()



if __name__ == '__main__': # then this script is being run on its own, i.e. not imported
	main()
else:
	print 'I don\'t think you ment to import this'
	sys.exit(1)
	
